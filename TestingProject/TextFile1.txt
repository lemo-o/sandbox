Singlestons are garbo for cross-browser and parallel testing
	*Useful for Android testing to handle state
	Make a factory to output and handle drivers as needed

~~Case Standardization: 
	PascalCase for methods, namespaces, classes, and public variables
	_camelCase for private variables
	No snake_case - I like snake_case :(

Clean up white space

Use fewer try/catches in general

Nested Try/Catch blocks are "not great"
	Build more general handler methods
	-or-
	Split logic into other methods

	Try WebDriverWait
	Try and Catch statements tend to be really similar. This can probably be avoided. 

General Driver logic should be handled in a class dedicated to it
	Call FindElement() via an abstracted, parent class instead of directly in the handlers
	^^^^^^^^^^
	General Driver logic should be handled in a class dedicated to it. That is to say, you 
	can call FindElement() via an abstracted, parent class or something instead of directly 
	in the handlers.

	The idea is to use components with composition and then pass in different By locaters
	Since components all generally use FindElement, have a parent class for that and whatever else all componenets use
	FindElement will exist in the parent class, which will get get used in components, then we use the components in the functions for specific pages
	

Single letter variables are something to avoid
	Use them for loops or a var in a lambda, but only that

Use the ID first, then XPath

YOU CAN SHORTEN XPATHS WHAT
	in hindsight that makes a lotta sense
	credit to Newt for trying to teach that to me ~before~ I sent this code in 

No hard waits	
	Make system.sleeps deterministic

public string[] randomizedItems = new string[5]; 
	Change to: public List<string> List<string>();

Names, Urls, or any constant should be stored in it's own file
	Goodbye locationDefinitions! you were a great idea! - that will still exist in a different file lol 
	Hello locationHandler! You rise from the ashes!

	Don't really need databases for testing - the go-to is public static classes

Learn:
	Properties
	Interfaces